name: Playit RDP Tunnel

on:
  workflow_dispatch:

jobs:
  setup-rdp-tunnel:
    runs-on: windows-latest
    timeout-minutes: 360  # 6 hour max timeout

    steps:
    # 1. PREPARE SYSTEM
    - name: Install aria2 (download accelerator)
      run: |
        Invoke-WebRequest -Uri "https://github.com/aria2/aria2/releases/download/release-1.36.0/aria2-1.36.0-win-64bit-build1.zip" -OutFile "$env:RUNNER_TEMP\aria2.zip"
        Expand-Archive -Path "$env:RUNNER_TEMP\aria2.zip" -DestinationPath "$env:RUNNER_TEMP\aria2" 
        echo "$env:RUNNER_TEMP\aria2" | Out-File -FilePath $env:GITHUB_PATH -Append

    - name: Check out repository
      uses: actions/checkout@v2

    # 2. CORE SETUP (RDP + Playit)
    - name: Setup RDP and Playit
      run: |
        # Install Playit
        Invoke-WebRequest -Uri "https://github.com/playit-cloud/playit-agent/releases/download/v0.15.26/playit-windows-x86_64-signed.exe" -OutFile "$env:USERPROFILE\playit.exe"
        
        # Enable RDP
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
        Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "p@ssw0rd!" -Force)
        
        # Start Playit
        Start-Process -FilePath "$env:USERPROFILE\playit.exe" -ArgumentList "--secret ${{ secrets.PL }}"
        Write-Host "üü¢ RDP IS NOW ACTIVE! Connect immediately üü¢"

    # 3. DOWNLOAD FILES (NEW LINKS)
    - name: Download Files
      run: |
        function Get-MediaFireDirect {
            param($url)
            $response = Invoke-WebRequest -Uri $url -UseBasicParsing
            $direct = ($response.Links | Where-Object href -match "download\d+\.mediafire\.com").href
            if (!$direct) { $direct = ($response.Content -split '"downloadurl":"([^"]+)"' | Select-Object -Skip 1 -First 1) }
            return $direct -replace '\\/', '/'
        }

        # NEW MuMu Installer
        $mumuPage = "https://www.mediafire.com/file/u3ljtir2mf5esv1/MuMuInstaller_3.1.7.0_gw-overseas12_all_1712735105.exe/file"
        $mumuUrl = Get-MediaFireDirect -url $mumuPage
        $mumuPath = "$env:USERPROFILE\Downloads\MuMuInstaller.exe"
        
        # NEW MAIN_VODKA
        $vodkaPage = "https://www.mediafire.com/file/sn3meb58r4e1u2o/MAIN_VODKA.mumudata/file"
        $vodkaUrl = Get-MediaFireDirect -url $vodkaPage
        $vodkaPath = "$env:USERPROFILE\Downloads\MAIN_VODKA.mumudata"

        # Download with aria2
        aria2c -x16 -s16 -k10M "$mumuUrl" -d "$env:USERPROFILE\Downloads" -o "MuMuInstaller.exe"
        aria2c -x16 -s16 -k10M "$vodkaUrl" -d "$env:USERPROFILE\Downloads" -o "MAIN_VODKA.mumudata"

    # 4. MUMU INSTALLATION SETUP
    - name: Install MuMu Properly
      run: |
        $mumuPath = "$env:USERPROFILE\Downloads\MuMuInstaller.exe"
        
        # Create installation config
        $config = @"
[Install]
InstallPath=C:\MuMuPlayer
CreateDesktopIcon=1
AutoLaunch=0
"@
        $config | Out-File "$env:TEMP\mumu_config.ini"

        # Silent install with config
        Start-Process -FilePath $mumuPath -ArgumentList "/S /INI=$env:TEMP\mumu_config.ini" -Wait
        
        # Post-install setup
        if (Test-Path "C:\MuMuPlayer\emulator\nemu\EmulatorShell.exe") {
            Write-Host "‚úÖ MuMu installed successfully at C:\MuMuPlayer"
            # Add any additional setup commands here
        } else {
            Write-Host "‚ùå MuMu installation failed"
            exit 1
        }

    # 5. FINALIZE
    - name: Keep System Alive
      run: |
        Write-Host "=== SYSTEM READY ==="
        Write-Host "RDP: Active"
        Write-Host "Playit: Running" 
        Write-Host "MuMu: Installed at C:\MuMuPlayer"
        Write-Host "MAIN_VODKA: Downloaded to Downloads folder"
        Start-Sleep -Seconds 86400  # 24 hours
